version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: streaming-db
    environment:
      POSTGRES_USER: streaming_user
      POSTGRES_PASSWORD: streaming_pass
      POSTGRES_DB: streaming_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/seed-data/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U streaming_user -d streaming_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: streaming-redis
    ports:
      - "6379:6379"
    networks:
      - streaming-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: streaming-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      USER_SERVICE_URL: http://user-service:3001
      CONTENT_SERVICE_URL: http://content-service:3002
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      - redis
      - user-service
      - content-service
    networks:
      - streaming-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: streaming-user-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://streaming_user:streaming_pass@postgres:5432/streaming_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped

  # Content Service
  content-service:
    build:
      context: ./services/content
      dockerfile: Dockerfile
    container_name: streaming-content-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://streaming_user:streaming_pass@postgres:5432/streaming_db
      REDIS_URL: redis://redis:6379
      TMDB_API_KEY: your-tmdb-api-key-here
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - streaming-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: streaming-frontend
    ports:
      - "80:80"
    environment:
      REACT_APP_API_URL: http://localhost:3000
    depends_on:
      - api-gateway
    networks:
      - streaming-network
    restart: unless-stopped

networks:
  streaming-network:
    driver: bridge

volumes:
  postgres_data: